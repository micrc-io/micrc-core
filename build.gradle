plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.7.3' apply false
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

group = 'io.micrc.core'
version = '0.0.1'
sourceCompatibility = '11'
targetCompatibility = '11'

ext {
    set('camel.version', '3.18.1')
    set('cm.version', '2.1.3')
    set('springdoc.version', '1.6.11')
    set('mockserver.version', '5.14.0')
    set('rabbitmq-mock.version', '1.1.1')
    set('json-patch.version', '1.13')
    set('embedded-redis.version', '0.7.3')
    set('testcontainers.version', '2.2.7')
    set('shedlock.version', '4.42.0')
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "${colibri_nexus}"
        credentials {
            username "${colibri_nexus_user}"
            password "${colibri_nexus_pass}"
        }
    }
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    // annotation - micrc-annotations: gradle task - publishToMavenLocal
    implementation "io.micrc.core:micrc-annotations:0.0.1"

    // springboot basic
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-web"
    // metrics
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    // unit/integrate test
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    // for lombok
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    // for k8s configmap and secret
    runtimeOnly "org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8-config:${property('cm.version')}"

    // persistence
    runtimeOnly "mysql:mysql-connector-java"
    // jpa support for repository and query
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    // jdbc support for event store, tracker and idempotent store
    implementation "org.apache.camel.springboot:camel-jdbc-starter:${property('camel.version')}"
    // db for default, local
    implementation "com.h2database:h2"
    // db migration
    implementation "org.liquibase:liquibase-core"

    // integration camel for spring-boot base
    implementation "org.apache.camel.springboot:camel-spring-boot-starter:${property('camel.version')}"
    // bean integration for bean integrate in route
    implementation "org.apache.camel.springboot:camel-bean-starter:${property('camel.version')}"
    // groovy support for groovy script in route
    implementation "org.apache.camel.springboot:camel-groovy-starter:${property('camel.version')}"
    // json jackson support for tansform
    implementation "org.apache.camel.springboot:camel-jackson-starter:${property('camel.version')}"
    // jslt support for json(domain object) mapping
    implementation "org.apache.camel.springboot:camel-jslt-starter:${property('camel.version')}"
    // json patch support for custom router with json-pointer and json-patch
    implementation "com.github.java-json-tools:json-patch:${property('json-patch.version')}"

    // http/websocket endpoints producing, used by rest openapi component
    implementation "org.apache.camel.springboot:camel-undertow-starter:${property('camel.version')}"
    // http endpoints consuming, used by rest component
    implementation "org.apache.camel.springboot:camel-servlet-starter:${property('camel.version')}"
    // openapi producer - derivatives producer adapter
    implementation "org.apache.camel.springboot:camel-rest-openapi-starter:${property('camel.version')}"
    // rest consumer - presentations and derivatives consumer adapter
    implementation "org.apache.camel.springboot:camel-rest-starter:${property('camel.version')}"
    // rest api doc
    implementation "org.springdoc:springdoc-openapi-ui:${property('springdoc.version')}"
    // mock server for rpc producer
    implementation "org.mock-server:mockserver-netty-no-dependencies:${property('mockserver.version')}"

    // message endpoints for consuming and producing - message producer and consumer adapter
    implementation "org.apache.camel.springboot:camel-spring-rabbitmq-starter:${property('camel.version')}"
    // mock rabbitmq msg
    implementation "com.github.fridujo:rabbitmq-mock:${property('rabbitmq-mock.version')}"
    // implementation "com.playtika.testcontainers:embedded-rabbitmq:${property('testcontainers.version')}" // 备用。当rabbitmq-mock不适用时使用

    // redis for cache and schedule
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-data-redis"
    // shedlock for schedule distributed lock
    implementation "net.javacrumbs.shedlock:shedlock-spring:${property('shedlock.version')}"
    implementation "net.javacrumbs.shedlock:shedlock-provider-redis-spring:${property('shedlock.version')}"
    // // mock server
    implementation("it.ozimov:embedded-redis:${property('embedded-redis.version')}") {
        exclude group: "org.slf4j", module: "slf4j-simple"
    }
    // implementation "com.playtika.testcontainers:embedded-redis:${property('testcontainers.version')}" // 备用。当embedded-redis不适用时使用

}

processTestResources {
    filesMatching('micrc.properties') {
        expand([version: '0.0.1'])
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

// 执行publishToMavenLocal后，其他工程可正常引入
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

nexusPublishing {
    repositories {
        create("colibri") {
            nexusUrl.set(uri("${colibri_nexus}"))
            snapshotRepositoryUrl.set(uri("${colibri_nexus}"))
            username.set("${colibri_nexus_user}")
            password.set("${colibri_nexus_pass}")
        }
        create("central") {
        }
    }
}
